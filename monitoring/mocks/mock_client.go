// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kitagry/gcp-telemetry-mcp/monitoring (interfaces: MonitoringClient,MonitoringClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_client.go -package=mocks github.com/kitagry/gcp-telemetry-mcp/monitoring MonitoringClient,MonitoringClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	monitoring "github.com/kitagry/gcp-telemetry-mcp/monitoring"
	gomock "go.uber.org/mock/gomock"
)

// MockMonitoringClient is a mock of MonitoringClient interface.
type MockMonitoringClient struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringClientMockRecorder
	isgomock struct{}
}

// MockMonitoringClientMockRecorder is the mock recorder for MockMonitoringClient.
type MockMonitoringClientMockRecorder struct {
	mock *MockMonitoringClient
}

// NewMockMonitoringClient creates a new mock instance.
func NewMockMonitoringClient(ctrl *gomock.Controller) *MockMonitoringClient {
	mock := &MockMonitoringClient{ctrl: ctrl}
	mock.recorder = &MockMonitoringClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoringClient) EXPECT() *MockMonitoringClientMockRecorder {
	return m.recorder
}

// CreateMetricDescriptor mocks base method.
func (m *MockMonitoringClient) CreateMetricDescriptor(ctx context.Context, req monitoring.CreateMetricRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricDescriptor", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetricDescriptor indicates an expected call of CreateMetricDescriptor.
func (mr *MockMonitoringClientMockRecorder) CreateMetricDescriptor(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricDescriptor", reflect.TypeOf((*MockMonitoringClient)(nil).CreateMetricDescriptor), ctx, req)
}

// DeleteMetricDescriptor mocks base method.
func (m *MockMonitoringClient) DeleteMetricDescriptor(ctx context.Context, metricType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetricDescriptor", ctx, metricType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetricDescriptor indicates an expected call of DeleteMetricDescriptor.
func (mr *MockMonitoringClientMockRecorder) DeleteMetricDescriptor(ctx, metricType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetricDescriptor", reflect.TypeOf((*MockMonitoringClient)(nil).DeleteMetricDescriptor), ctx, metricType)
}

// ListMetricDescriptors mocks base method.
func (m *MockMonitoringClient) ListMetricDescriptors(ctx context.Context, filter string) ([]monitoring.MetricDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricDescriptors", ctx, filter)
	ret0, _ := ret[0].([]monitoring.MetricDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricDescriptors indicates an expected call of ListMetricDescriptors.
func (mr *MockMonitoringClientMockRecorder) ListMetricDescriptors(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricDescriptors", reflect.TypeOf((*MockMonitoringClient)(nil).ListMetricDescriptors), ctx, filter)
}

// ListTimeSeries mocks base method.
func (m *MockMonitoringClient) ListTimeSeries(ctx context.Context, req monitoring.ListTimeSeriesRequest) ([]monitoring.TimeSeriesData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimeSeries", ctx, req)
	ret0, _ := ret[0].([]monitoring.TimeSeriesData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimeSeries indicates an expected call of ListTimeSeries.
func (mr *MockMonitoringClientMockRecorder) ListTimeSeries(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeSeries", reflect.TypeOf((*MockMonitoringClient)(nil).ListTimeSeries), ctx, req)
}

// WriteTimeSeries mocks base method.
func (m *MockMonitoringClient) WriteTimeSeries(ctx context.Context, req monitoring.WriteTimeSeriesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTimeSeries", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTimeSeries indicates an expected call of WriteTimeSeries.
func (mr *MockMonitoringClientMockRecorder) WriteTimeSeries(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTimeSeries", reflect.TypeOf((*MockMonitoringClient)(nil).WriteTimeSeries), ctx, req)
}

// MockMonitoringClientInterface is a mock of MonitoringClientInterface interface.
type MockMonitoringClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringClientInterfaceMockRecorder
	isgomock struct{}
}

// MockMonitoringClientInterfaceMockRecorder is the mock recorder for MockMonitoringClientInterface.
type MockMonitoringClientInterfaceMockRecorder struct {
	mock *MockMonitoringClientInterface
}

// NewMockMonitoringClientInterface creates a new mock instance.
func NewMockMonitoringClientInterface(ctrl *gomock.Controller) *MockMonitoringClientInterface {
	mock := &MockMonitoringClientInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoringClientInterface) EXPECT() *MockMonitoringClientInterfaceMockRecorder {
	return m.recorder
}

// CreateMetricDescriptor mocks base method.
func (m *MockMonitoringClientInterface) CreateMetricDescriptor(ctx context.Context, req monitoring.CreateMetricRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricDescriptor", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetricDescriptor indicates an expected call of CreateMetricDescriptor.
func (mr *MockMonitoringClientInterfaceMockRecorder) CreateMetricDescriptor(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricDescriptor", reflect.TypeOf((*MockMonitoringClientInterface)(nil).CreateMetricDescriptor), ctx, req)
}

// DeleteMetricDescriptor mocks base method.
func (m *MockMonitoringClientInterface) DeleteMetricDescriptor(ctx context.Context, metricType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetricDescriptor", ctx, metricType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetricDescriptor indicates an expected call of DeleteMetricDescriptor.
func (mr *MockMonitoringClientInterfaceMockRecorder) DeleteMetricDescriptor(ctx, metricType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetricDescriptor", reflect.TypeOf((*MockMonitoringClientInterface)(nil).DeleteMetricDescriptor), ctx, metricType)
}

// ListMetricDescriptors mocks base method.
func (m *MockMonitoringClientInterface) ListMetricDescriptors(ctx context.Context, filter string) ([]monitoring.MetricDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricDescriptors", ctx, filter)
	ret0, _ := ret[0].([]monitoring.MetricDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricDescriptors indicates an expected call of ListMetricDescriptors.
func (mr *MockMonitoringClientInterfaceMockRecorder) ListMetricDescriptors(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricDescriptors", reflect.TypeOf((*MockMonitoringClientInterface)(nil).ListMetricDescriptors), ctx, filter)
}

// ListTimeSeries mocks base method.
func (m *MockMonitoringClientInterface) ListTimeSeries(ctx context.Context, req monitoring.ListTimeSeriesRequest) ([]monitoring.TimeSeriesData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimeSeries", ctx, req)
	ret0, _ := ret[0].([]monitoring.TimeSeriesData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimeSeries indicates an expected call of ListTimeSeries.
func (mr *MockMonitoringClientInterfaceMockRecorder) ListTimeSeries(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeSeries", reflect.TypeOf((*MockMonitoringClientInterface)(nil).ListTimeSeries), ctx, req)
}

// WriteTimeSeries mocks base method.
func (m *MockMonitoringClientInterface) WriteTimeSeries(ctx context.Context, req monitoring.WriteTimeSeriesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTimeSeries", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTimeSeries indicates an expected call of WriteTimeSeries.
func (mr *MockMonitoringClientInterfaceMockRecorder) WriteTimeSeries(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTimeSeries", reflect.TypeOf((*MockMonitoringClientInterface)(nil).WriteTimeSeries), ctx, req)
}
