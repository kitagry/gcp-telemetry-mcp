// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kitagry/gcp-telemetry-mcp/trace (interfaces: TraceClient,TraceClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_client.go -package=mocks github.com/kitagry/gcp-telemetry-mcp/trace TraceClient,TraceClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	trace "github.com/kitagry/gcp-telemetry-mcp/trace"
	gomock "go.uber.org/mock/gomock"
)

// MockTraceClient is a mock of TraceClient interface.
type MockTraceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTraceClientMockRecorder
	isgomock struct{}
}

// MockTraceClientMockRecorder is the mock recorder for MockTraceClient.
type MockTraceClientMockRecorder struct {
	mock *MockTraceClient
}

// NewMockTraceClient creates a new mock instance.
func NewMockTraceClient(ctrl *gomock.Controller) *MockTraceClient {
	mock := &MockTraceClient{ctrl: ctrl}
	mock.recorder = &MockTraceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceClient) EXPECT() *MockTraceClientMockRecorder {
	return m.recorder
}

// GetTrace mocks base method.
func (m *MockTraceClient) GetTrace(ctx context.Context, req trace.GetTraceRequest) (*trace.Trace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrace", ctx, req)
	ret0, _ := ret[0].(*trace.Trace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrace indicates an expected call of GetTrace.
func (mr *MockTraceClientMockRecorder) GetTrace(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrace", reflect.TypeOf((*MockTraceClient)(nil).GetTrace), ctx, req)
}

// ListTraces mocks base method.
func (m *MockTraceClient) ListTraces(ctx context.Context, req trace.ListTracesRequest) ([]trace.Trace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTraces", ctx, req)
	ret0, _ := ret[0].([]trace.Trace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTraces indicates an expected call of ListTraces.
func (mr *MockTraceClientMockRecorder) ListTraces(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTraces", reflect.TypeOf((*MockTraceClient)(nil).ListTraces), ctx, req)
}

// PatchTraces mocks base method.
func (m *MockTraceClient) PatchTraces(ctx context.Context, req trace.PatchTraceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchTraces", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTraces indicates an expected call of PatchTraces.
func (mr *MockTraceClientMockRecorder) PatchTraces(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTraces", reflect.TypeOf((*MockTraceClient)(nil).PatchTraces), ctx, req)
}

// MockTraceClientInterface is a mock of TraceClientInterface interface.
type MockTraceClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTraceClientInterfaceMockRecorder
	isgomock struct{}
}

// MockTraceClientInterfaceMockRecorder is the mock recorder for MockTraceClientInterface.
type MockTraceClientInterfaceMockRecorder struct {
	mock *MockTraceClientInterface
}

// NewMockTraceClientInterface creates a new mock instance.
func NewMockTraceClientInterface(ctrl *gomock.Controller) *MockTraceClientInterface {
	mock := &MockTraceClientInterface{ctrl: ctrl}
	mock.recorder = &MockTraceClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceClientInterface) EXPECT() *MockTraceClientInterfaceMockRecorder {
	return m.recorder
}

// GetTrace mocks base method.
func (m *MockTraceClientInterface) GetTrace(ctx context.Context, req trace.GetTraceRequest) (*trace.Trace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrace", ctx, req)
	ret0, _ := ret[0].(*trace.Trace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrace indicates an expected call of GetTrace.
func (mr *MockTraceClientInterfaceMockRecorder) GetTrace(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrace", reflect.TypeOf((*MockTraceClientInterface)(nil).GetTrace), ctx, req)
}

// ListTraces mocks base method.
func (m *MockTraceClientInterface) ListTraces(ctx context.Context, req trace.ListTracesRequest) ([]trace.Trace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTraces", ctx, req)
	ret0, _ := ret[0].([]trace.Trace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTraces indicates an expected call of ListTraces.
func (mr *MockTraceClientInterfaceMockRecorder) ListTraces(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTraces", reflect.TypeOf((*MockTraceClientInterface)(nil).ListTraces), ctx, req)
}

// PatchTraces mocks base method.
func (m *MockTraceClientInterface) PatchTraces(ctx context.Context, req trace.PatchTraceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchTraces", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTraces indicates an expected call of PatchTraces.
func (mr *MockTraceClientInterfaceMockRecorder) PatchTraces(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTraces", reflect.TypeOf((*MockTraceClientInterface)(nil).PatchTraces), ctx, req)
}
